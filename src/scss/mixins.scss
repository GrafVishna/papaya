@use "sass:math" as math;

$containerWidth: $maxWidthContainer + $containerPadding;
$containerWidthBig: $maxWidthContainerBig + $containerPadding;
//Percent
@function percent($px, $from: 100) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

//REM
@function toRem($px, $current: 16) {
  $result: math.div($px, $current) + rem;
  @return $result;
}

//em
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

// Adaptive Property (CLAMP)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // for calc ();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Break-Liecers in Em
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // The formula of floating value
  // Source: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // obtaining the value of the property
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
  // Якщо негативні значення
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
  }

  // set the default value
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }
  // Adapt the size in the gap between the specified widths
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Якщо підтримується clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // if not supported CLAMP ();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
              #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) -
               math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}
